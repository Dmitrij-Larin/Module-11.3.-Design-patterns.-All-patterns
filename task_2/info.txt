Объяснение паттернов.

1. Singleton: Класс `Library` реализует паттерн Singleton, чтобы гарантировать, что приложение работает с единственным
экземпляром библиотеки. Это удобно, поскольку все операции с книгами и читателями должны происходить в одном месте.

2. Factory: `EntityFactory` отвечает за создание объектов книг, читателей и библиотекарей. Использование фабрики
позволяет легко изменять процесс создания объектов, если в будущем потребуется добавление новых параметров или логики.

3. Observer: Логирование действий библиотекаря реализуется через класс `Logger`, который можно расширить для наблюдения
за событиями и действий, которые необходимо записывать.

4. Command: Паттерн Command используется для инкапсуляции операций над сущностями (например, добавление/удаление книг).
Это позволяет легко добавлять новые команды или изменять существующие, а также управлять историей операций.

5. Strategy: Паттерн Strategy позволяет использовать различные стратегии для поиска книг (по названию, автору и т.д.),
что делает поиск более гибким и расширяемым.

6. Memento: Паттерн Memento можно было бы использовать для сохранения состояния библиотеки, хотя здесь было реализовано
только сохранение/загрузка через JSON.